{"ast":null,"code":"import React,{useContext}from'react';import{Navigate,Outlet,useLocation}from'react-router-dom';import{AuthContext}from'../../context/AuthContext';// Component to protect routes based on authentication and role\nimport{jsx as _jsx}from\"react/jsx-runtime\";const PrivateRoute=_ref=>{let{allowedRoles}=_ref;const context=useContext(AuthContext);const{currentUser,token,loading}=context||{currentUser:null,token:null,loading:false};const location=useLocation();// If still loading auth state, don't render anything yet\nif(loading){return/*#__PURE__*/_jsx(\"div\",{className:\"flex justify-center items-center h-screen\",children:/*#__PURE__*/_jsx(\"div\",{className:\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-green-500\"})});}// Check if user is authenticated\nif(!token||!currentUser){// Redirect to login page, but save the location they were trying to access\nreturn/*#__PURE__*/_jsx(Navigate,{to:\"/login\",state:{from:location},replace:true});}// If roles are specified, check if user has required role\nif(allowedRoles&&!allowedRoles.includes(currentUser===null||currentUser===void 0?void 0:currentUser.role)){// Redirect to unauthorized page\nreturn/*#__PURE__*/_jsx(Navigate,{to:\"/unauthorized\",replace:true});}// User is authenticated and has the required role, render the protected component\nreturn/*#__PURE__*/_jsx(Outlet,{});};export default PrivateRoute;","map":{"version":3,"names":["React","useContext","Navigate","Outlet","useLocation","AuthContext","jsx","_jsx","PrivateRoute","_ref","allowedRoles","context","currentUser","token","loading","location","className","children","to","state","from","replace","includes","role"],"sources":["d:/GitHub Projects/Ayurvedic Product Distribution System/Online-Ayurvedic-Product-Distribution-System/frontend/src/components/routing/PrivateRoute.js"],"sourcesContent":["import React, { useContext } from 'react';\nimport { Navigate, Outlet, useLocation } from 'react-router-dom';\nimport { AuthContext } from '../../context/AuthContext';\n\n// Component to protect routes based on authentication and role\nconst PrivateRoute = ({ allowedRoles }) => {\n  const context = useContext(AuthContext);\n  const { currentUser, token, loading } = context || { currentUser: null, token: null, loading: false };\n  const location = useLocation();\n\n  // If still loading auth state, don't render anything yet\n  if (loading) {\n    return (\n      <div className=\"flex justify-center items-center h-screen\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-green-500\"></div>\n      </div>\n    );\n  }\n\n  // Check if user is authenticated\n  if (!token || !currentUser) {\n    // Redirect to login page, but save the location they were trying to access\n    return <Navigate to=\"/login\" state={{ from: location }} replace />;\n  }\n\n  // If roles are specified, check if user has required role\n  if (allowedRoles && !allowedRoles.includes(currentUser?.role)) {\n    // Redirect to unauthorized page\n    return <Navigate to=\"/unauthorized\" replace />;\n  }\n\n  // User is authenticated and has the required role, render the protected component\n  return <Outlet />;\n};\n\nexport default PrivateRoute;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,UAAU,KAAQ,OAAO,CACzC,OAASC,QAAQ,CAAEC,MAAM,CAAEC,WAAW,KAAQ,kBAAkB,CAChE,OAASC,WAAW,KAAQ,2BAA2B,CAEvD;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBACA,KAAM,CAAAC,YAAY,CAAGC,IAAA,EAAsB,IAArB,CAAEC,YAAa,CAAC,CAAAD,IAAA,CACpC,KAAM,CAAAE,OAAO,CAAGV,UAAU,CAACI,WAAW,CAAC,CACvC,KAAM,CAAEO,WAAW,CAAEC,KAAK,CAAEC,OAAQ,CAAC,CAAGH,OAAO,EAAI,CAAEC,WAAW,CAAE,IAAI,CAAEC,KAAK,CAAE,IAAI,CAAEC,OAAO,CAAE,KAAM,CAAC,CACrG,KAAM,CAAAC,QAAQ,CAAGX,WAAW,CAAC,CAAC,CAE9B;AACA,GAAIU,OAAO,CAAE,CACX,mBACEP,IAAA,QAAKS,SAAS,CAAC,2CAA2C,CAAAC,QAAA,cACxDV,IAAA,QAAKS,SAAS,CAAC,4EAA4E,CAAM,CAAC,CAC/F,CAAC,CAEV,CAEA;AACA,GAAI,CAACH,KAAK,EAAI,CAACD,WAAW,CAAE,CAC1B;AACA,mBAAOL,IAAA,CAACL,QAAQ,EAACgB,EAAE,CAAC,QAAQ,CAACC,KAAK,CAAE,CAAEC,IAAI,CAAEL,QAAS,CAAE,CAACM,OAAO,MAAE,CAAC,CACpE,CAEA;AACA,GAAIX,YAAY,EAAI,CAACA,YAAY,CAACY,QAAQ,CAACV,WAAW,SAAXA,WAAW,iBAAXA,WAAW,CAAEW,IAAI,CAAC,CAAE,CAC7D;AACA,mBAAOhB,IAAA,CAACL,QAAQ,EAACgB,EAAE,CAAC,eAAe,CAACG,OAAO,MAAE,CAAC,CAChD,CAEA;AACA,mBAAOd,IAAA,CAACJ,MAAM,GAAE,CAAC,CACnB,CAAC,CAED,cAAe,CAAAK,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}