{"ast":null,"code":"/**\n * Utility functions for handling images in the application\n */\n\n// Base URL for the API server\nconst API_BASE_URL = 'http://localhost:5000';\n\n/**\n * Gets the full URL for an image from its relative path\n * @param {string} imageUrl - The image URL stored in the database\n * @returns {string} - The full URL that can be used in an img src attribute\n */\nexport const getFullImageUrl = imageUrl => {\n  if (!imageUrl) {\n    return 'https://via.placeholder.com/300x200?text=No+Image';\n  }\n\n  // If the image URL is already absolute, return it as is\n  if (imageUrl.startsWith('http') || imageUrl.startsWith('data:')) {\n    return imageUrl;\n  }\n\n  // Otherwise, prepend the API base URL\n  return `${API_BASE_URL}${imageUrl}`;\n};\n\n/**\n * Handles image loading errors by setting a placeholder image\n * @param {Event} event - The error event from the image\n */\nexport const handleImageError = event => {\n  event.target.onerror = null; // Prevent infinite loop\n  event.target.src = 'https://via.placeholder.com/300x200?text=No+Image';\n};","map":{"version":3,"names":["API_BASE_URL","getFullImageUrl","imageUrl","startsWith","handleImageError","event","target","onerror","src"],"sources":["d:/GitHub Projects/Ayurvedic Product Distribution System/Online-Ayurvedic-Product-Distribution-System/frontend/src/utils/imageUtils.js"],"sourcesContent":["/**\n * Utility functions for handling images in the application\n */\n\n// Base URL for the API server\nconst API_BASE_URL = 'http://localhost:5000';\n\n/**\n * Gets the full URL for an image from its relative path\n * @param {string} imageUrl - The image URL stored in the database\n * @returns {string} - The full URL that can be used in an img src attribute\n */\nexport const getFullImageUrl = (imageUrl) => {\n  if (!imageUrl) {\n    return 'https://via.placeholder.com/300x200?text=No+Image';\n  }\n  \n  // If the image URL is already absolute, return it as is\n  if (imageUrl.startsWith('http') || imageUrl.startsWith('data:')) {\n    return imageUrl;\n  }\n  \n  // Otherwise, prepend the API base URL\n  return `${API_BASE_URL}${imageUrl}`;\n};\n\n/**\n * Handles image loading errors by setting a placeholder image\n * @param {Event} event - The error event from the image\n */\nexport const handleImageError = (event) => {\n  event.target.onerror = null; // Prevent infinite loop\n  event.target.src = 'https://via.placeholder.com/300x200?text=No+Image';\n};\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA,MAAMA,YAAY,GAAG,uBAAuB;;AAE5C;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAIC,QAAQ,IAAK;EAC3C,IAAI,CAACA,QAAQ,EAAE;IACb,OAAO,mDAAmD;EAC5D;;EAEA;EACA,IAAIA,QAAQ,CAACC,UAAU,CAAC,MAAM,CAAC,IAAID,QAAQ,CAACC,UAAU,CAAC,OAAO,CAAC,EAAE;IAC/D,OAAOD,QAAQ;EACjB;;EAEA;EACA,OAAO,GAAGF,YAAY,GAAGE,QAAQ,EAAE;AACrC,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAME,gBAAgB,GAAIC,KAAK,IAAK;EACzCA,KAAK,CAACC,MAAM,CAACC,OAAO,GAAG,IAAI,CAAC,CAAC;EAC7BF,KAAK,CAACC,MAAM,CAACE,GAAG,GAAG,mDAAmD;AACxE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}