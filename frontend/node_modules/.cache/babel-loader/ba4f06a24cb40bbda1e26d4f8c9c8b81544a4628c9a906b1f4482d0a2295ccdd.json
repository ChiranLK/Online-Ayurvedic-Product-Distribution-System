{"ast":null,"code":"// Cart utility functions\n\n/**\n * Add a product to the cart\n * @param {string} productId - ID of the product to add\n * @param {number} quantity - Quantity to add (default: 1)\n * @returns {object} - Updated cart\n */\nexport const addToCart = (productId, quantity = 1) => {\n  // Get current cart from localStorage or initialize empty array\n  const cart = JSON.parse(localStorage.getItem('ayurvedicCart')) || [];\n\n  // Check if product already exists in cart\n  const existingItemIndex = cart.findIndex(item => item.productId === productId);\n  if (existingItemIndex >= 0) {\n    // Update quantity if product exists\n    cart[existingItemIndex].quantity += quantity;\n  } else {\n    // Add new item if product doesn't exist in cart\n    cart.push({\n      productId,\n      quantity\n    });\n  }\n\n  // Save updated cart to localStorage\n  localStorage.setItem('ayurvedicCart', JSON.stringify(cart));\n\n  // Dispatch custom event to notify other components (like CartIcon) that cart has changed\n  window.dispatchEvent(new Event('cartUpdated'));\n  return cart;\n};\n\n/**\n * Update a product's quantity in the cart\n * @param {string} productId - ID of the product to update\n * @param {number} quantity - New quantity\n * @returns {object} - Updated cart\n */\nexport const updateCartItem = (productId, quantity) => {\n  if (quantity < 1) return removeFromCart(productId);\n  const cart = JSON.parse(localStorage.getItem('ayurvedicCart')) || [];\n  const existingItemIndex = cart.findIndex(item => item.productId === productId);\n  if (existingItemIndex >= 0) {\n    cart[existingItemIndex].quantity = quantity;\n    localStorage.setItem('ayurvedicCart', JSON.stringify(cart));\n    window.dispatchEvent(new Event('cartUpdated'));\n  }\n  return cart;\n};\n\n/**\n * Remove a product from the cart\n * @param {string} productId - ID of the product to remove\n * @returns {object} - Updated cart\n */\nexport const removeFromCart = productId => {\n  const cart = JSON.parse(localStorage.getItem('ayurvedicCart')) || [];\n  const updatedCart = cart.filter(item => item.productId !== productId);\n  localStorage.setItem('ayurvedicCart', JSON.stringify(updatedCart));\n  window.dispatchEvent(new Event('cartUpdated'));\n  return updatedCart;\n};\n\n/**\n * Clear all items from the cart\n */\nexport const clearCart = () => {\n  localStorage.removeItem('ayurvedicCart');\n  window.dispatchEvent(new Event('cartUpdated'));\n};\n\n/**\n * Get the current cart items\n * @returns {Array} - Cart items\n */\nexport const getCart = () => {\n  return JSON.parse(localStorage.getItem('ayurvedicCart')) || [];\n};\n\n/**\n * Get the total number of items in the cart\n * @returns {number} - Total number of items\n */\nexport const getCartCount = () => {\n  const cart = getCart();\n  return cart.reduce((total, item) => total + item.quantity, 0);\n};\n\n/**\n * Check if a product is in the cart\n * @param {string} productId - ID of the product to check\n * @returns {boolean} - True if product is in cart\n */\nexport const isInCart = productId => {\n  const cart = getCart();\n  return cart.some(item => item.productId === productId);\n};","map":{"version":3,"names":["addToCart","productId","quantity","cart","JSON","parse","localStorage","getItem","existingItemIndex","findIndex","item","push","setItem","stringify","window","dispatchEvent","Event","updateCartItem","removeFromCart","updatedCart","filter","clearCart","removeItem","getCart","getCartCount","reduce","total","isInCart","some"],"sources":["d:/GitHub Projects/Ayurvedic Product Distribution System/Online-Ayurvedic-Product-Distribution-System/frontend/src/utils/cartUtils.js"],"sourcesContent":["// Cart utility functions\n\n/**\n * Add a product to the cart\n * @param {string} productId - ID of the product to add\n * @param {number} quantity - Quantity to add (default: 1)\n * @returns {object} - Updated cart\n */\nexport const addToCart = (productId, quantity = 1) => {\n  // Get current cart from localStorage or initialize empty array\n  const cart = JSON.parse(localStorage.getItem('ayurvedicCart')) || [];\n  \n  // Check if product already exists in cart\n  const existingItemIndex = cart.findIndex(item => item.productId === productId);\n  \n  if (existingItemIndex >= 0) {\n    // Update quantity if product exists\n    cart[existingItemIndex].quantity += quantity;\n  } else {\n    // Add new item if product doesn't exist in cart\n    cart.push({ productId, quantity });\n  }\n  \n  // Save updated cart to localStorage\n  localStorage.setItem('ayurvedicCart', JSON.stringify(cart));\n  \n  // Dispatch custom event to notify other components (like CartIcon) that cart has changed\n  window.dispatchEvent(new Event('cartUpdated'));\n  \n  return cart;\n};\n\n/**\n * Update a product's quantity in the cart\n * @param {string} productId - ID of the product to update\n * @param {number} quantity - New quantity\n * @returns {object} - Updated cart\n */\nexport const updateCartItem = (productId, quantity) => {\n  if (quantity < 1) return removeFromCart(productId);\n  \n  const cart = JSON.parse(localStorage.getItem('ayurvedicCart')) || [];\n  const existingItemIndex = cart.findIndex(item => item.productId === productId);\n  \n  if (existingItemIndex >= 0) {\n    cart[existingItemIndex].quantity = quantity;\n    localStorage.setItem('ayurvedicCart', JSON.stringify(cart));\n    window.dispatchEvent(new Event('cartUpdated'));\n  }\n  \n  return cart;\n};\n\n/**\n * Remove a product from the cart\n * @param {string} productId - ID of the product to remove\n * @returns {object} - Updated cart\n */\nexport const removeFromCart = (productId) => {\n  const cart = JSON.parse(localStorage.getItem('ayurvedicCart')) || [];\n  const updatedCart = cart.filter(item => item.productId !== productId);\n  \n  localStorage.setItem('ayurvedicCart', JSON.stringify(updatedCart));\n  window.dispatchEvent(new Event('cartUpdated'));\n  \n  return updatedCart;\n};\n\n/**\n * Clear all items from the cart\n */\nexport const clearCart = () => {\n  localStorage.removeItem('ayurvedicCart');\n  window.dispatchEvent(new Event('cartUpdated'));\n};\n\n/**\n * Get the current cart items\n * @returns {Array} - Cart items\n */\nexport const getCart = () => {\n  return JSON.parse(localStorage.getItem('ayurvedicCart')) || [];\n};\n\n/**\n * Get the total number of items in the cart\n * @returns {number} - Total number of items\n */\nexport const getCartCount = () => {\n  const cart = getCart();\n  return cart.reduce((total, item) => total + item.quantity, 0);\n};\n\n/**\n * Check if a product is in the cart\n * @param {string} productId - ID of the product to check\n * @returns {boolean} - True if product is in cart\n */\nexport const isInCart = (productId) => {\n  const cart = getCart();\n  return cart.some(item => item.productId === productId);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}