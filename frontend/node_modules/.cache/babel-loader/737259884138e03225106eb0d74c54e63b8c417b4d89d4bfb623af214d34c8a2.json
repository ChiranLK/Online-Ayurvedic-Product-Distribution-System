{"ast":null,"code":"var _jsxFileName = \"d:\\\\GitHub Projects\\\\Ayurvedic Product Distribution System\\\\Online-Ayurvedic-Product-Distribution-System\\\\frontend\\\\src\\\\components\\\\routing\\\\ProtectedRoute.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from 'react';\nimport { Navigate, useNavigate } from 'react-router-dom';\nimport { AuthContext } from '../../context/AuthContext';\nimport { useModal } from '../../context/ModalContext';\n\n/**\n * ProtectedRoute component that restricts access based on authentication and roles\n * @param {Object} props Component props\n * @param {Array|String} props.roles Array of allowed roles or single role string\n * @param {React.ReactNode} props.children Child components to render if access is granted\n * @returns {JSX.Element} Protected route component\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  roles,\n  children\n}) => {\n  _s();\n  const {\n    isAuthenticated,\n    currentUser\n  } = useContext(AuthContext);\n  const {\n    openModal\n  } = useModal();\n  const navigate = useNavigate();\n  const [isReady, setIsReady] = useState(false);\n  const checkRoleAccess = () => {\n    if (!roles) return true; // No role restriction\n    if (!currentUser || !currentUser.role) return false;\n    if (Array.isArray(roles)) {\n      return roles.includes(currentUser.role);\n    }\n    return currentUser.role === roles;\n  };\n  useEffect(() => {\n    // Check authentication and permissions\n    if (!isAuthenticated) {\n      openModal({\n        title: 'Authentication Required',\n        message: 'You need to log in to access this page.',\n        confirmText: 'Log In',\n        type: 'info',\n        onConfirm: () => navigate('/login')\n      });\n      setIsReady(true);\n    } else if (roles && !checkRoleAccess()) {\n      openModal({\n        title: 'Access Denied',\n        message: 'You do not have permission to access this page.',\n        confirmText: 'OK',\n        type: 'warning'\n      });\n      setIsReady(true);\n    } else {\n      setIsReady(true);\n    }\n  }, [isAuthenticated, currentUser, roles, navigate, openModal, checkRoleAccess]);\n  if (!isReady) {\n    return null; // Wait until we've determined authentication state\n  }\n\n  // Render based on authentication state and permissions\n  if (!isAuthenticated) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 12\n    }, this);\n  }\n  if (roles && !checkRoleAccess()) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 12\n    }, this);\n  }\n\n  // If authenticated and has required role, render children\n  return children;\n};\n_s(ProtectedRoute, \"l22TK7S4sx1JW9ll7vF8Nitrbo8=\", false, function () {\n  return [useModal, useNavigate];\n});\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","useContext","useEffect","useState","Navigate","useNavigate","AuthContext","useModal","jsxDEV","_jsxDEV","ProtectedRoute","roles","children","_s","isAuthenticated","currentUser","openModal","navigate","isReady","setIsReady","checkRoleAccess","role","Array","isArray","includes","title","message","confirmText","type","onConfirm","to","replace","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["d:/GitHub Projects/Ayurvedic Product Distribution System/Online-Ayurvedic-Product-Distribution-System/frontend/src/components/routing/ProtectedRoute.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport { Navigate, useNavigate } from 'react-router-dom';\nimport { AuthContext } from '../../context/AuthContext';\nimport { useModal } from '../../context/ModalContext';\n\n/**\n * ProtectedRoute component that restricts access based on authentication and roles\n * @param {Object} props Component props\n * @param {Array|String} props.roles Array of allowed roles or single role string\n * @param {React.ReactNode} props.children Child components to render if access is granted\n * @returns {JSX.Element} Protected route component\n */\nconst ProtectedRoute = ({ roles, children }) => {\n  const { isAuthenticated, currentUser } = useContext(AuthContext);\n  const { openModal } = useModal();\n  const navigate = useNavigate();\n  const [isReady, setIsReady] = useState(false);\n\n  const checkRoleAccess = () => {\n    if (!roles) return true; // No role restriction\n    if (!currentUser || !currentUser.role) return false;\n    \n    if (Array.isArray(roles)) {\n      return roles.includes(currentUser.role);\n    }\n    \n    return currentUser.role === roles;\n  };\n\n  useEffect(() => {\n    // Check authentication and permissions\n    if (!isAuthenticated) {\n      openModal({\n        title: 'Authentication Required',\n        message: 'You need to log in to access this page.',\n        confirmText: 'Log In',\n        type: 'info',\n        onConfirm: () => navigate('/login')\n      });\n      setIsReady(true);\n    } else if (roles && !checkRoleAccess()) {\n      openModal({\n        title: 'Access Denied',\n        message: 'You do not have permission to access this page.',\n        confirmText: 'OK',\n        type: 'warning'\n      });\n      setIsReady(true);\n    } else {\n      setIsReady(true);\n    }\n  }, [isAuthenticated, currentUser, roles, navigate, openModal, checkRoleAccess]);\n\n  if (!isReady) {\n    return null; // Wait until we've determined authentication state\n  }\n\n  // Render based on authentication state and permissions\n  if (!isAuthenticated) {\n    return <Navigate to=\"/login\" replace />;\n  }\n\n  if (roles && !checkRoleAccess()) {\n    return <Navigate to=\"/\" replace />;\n  }\n\n  // If authenticated and has required role, render children\n  return children;\n};\n\nexport default ProtectedRoute;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC9D,SAASC,QAAQ,EAAEC,WAAW,QAAQ,kBAAkB;AACxD,SAASC,WAAW,QAAQ,2BAA2B;AACvD,SAASC,QAAQ,QAAQ,4BAA4B;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AANA,SAAAC,MAAA,IAAAC,OAAA;AAOA,MAAMC,cAAc,GAAGA,CAAC;EAAEC,KAAK;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC9C,MAAM;IAAEC,eAAe;IAAEC;EAAY,CAAC,GAAGd,UAAU,CAACK,WAAW,CAAC;EAChE,MAAM;IAAEU;EAAU,CAAC,GAAGT,QAAQ,CAAC,CAAC;EAChC,MAAMU,QAAQ,GAAGZ,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAMiB,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAI,CAACT,KAAK,EAAE,OAAO,IAAI,CAAC,CAAC;IACzB,IAAI,CAACI,WAAW,IAAI,CAACA,WAAW,CAACM,IAAI,EAAE,OAAO,KAAK;IAEnD,IAAIC,KAAK,CAACC,OAAO,CAACZ,KAAK,CAAC,EAAE;MACxB,OAAOA,KAAK,CAACa,QAAQ,CAACT,WAAW,CAACM,IAAI,CAAC;IACzC;IAEA,OAAON,WAAW,CAACM,IAAI,KAAKV,KAAK;EACnC,CAAC;EAEDT,SAAS,CAAC,MAAM;IACd;IACA,IAAI,CAACY,eAAe,EAAE;MACpBE,SAAS,CAAC;QACRS,KAAK,EAAE,yBAAyB;QAChCC,OAAO,EAAE,yCAAyC;QAClDC,WAAW,EAAE,QAAQ;QACrBC,IAAI,EAAE,MAAM;QACZC,SAAS,EAAEA,CAAA,KAAMZ,QAAQ,CAAC,QAAQ;MACpC,CAAC,CAAC;MACFE,UAAU,CAAC,IAAI,CAAC;IAClB,CAAC,MAAM,IAAIR,KAAK,IAAI,CAACS,eAAe,CAAC,CAAC,EAAE;MACtCJ,SAAS,CAAC;QACRS,KAAK,EAAE,eAAe;QACtBC,OAAO,EAAE,iDAAiD;QAC1DC,WAAW,EAAE,IAAI;QACjBC,IAAI,EAAE;MACR,CAAC,CAAC;MACFT,UAAU,CAAC,IAAI,CAAC;IAClB,CAAC,MAAM;MACLA,UAAU,CAAC,IAAI,CAAC;IAClB;EACF,CAAC,EAAE,CAACL,eAAe,EAAEC,WAAW,EAAEJ,KAAK,EAAEM,QAAQ,EAAED,SAAS,EAAEI,eAAe,CAAC,CAAC;EAE/E,IAAI,CAACF,OAAO,EAAE;IACZ,OAAO,IAAI,CAAC,CAAC;EACf;;EAEA;EACA,IAAI,CAACJ,eAAe,EAAE;IACpB,oBAAOL,OAAA,CAACL,QAAQ;MAAC0B,EAAE,EAAC,QAAQ;MAACC,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACzC;EAEA,IAAIxB,KAAK,IAAI,CAACS,eAAe,CAAC,CAAC,EAAE;IAC/B,oBAAOX,OAAA,CAACL,QAAQ;MAAC0B,EAAE,EAAC,GAAG;MAACC,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACpC;;EAEA;EACA,OAAOvB,QAAQ;AACjB,CAAC;AAACC,EAAA,CAxDIH,cAAc;EAAA,QAEIH,QAAQ,EACbF,WAAW;AAAA;AAAA+B,EAAA,GAHxB1B,cAAc;AA0DpB,eAAeA,cAAc;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}