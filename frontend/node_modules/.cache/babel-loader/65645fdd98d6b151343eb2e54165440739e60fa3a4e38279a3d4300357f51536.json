{"ast":null,"code":"/**\n * Utility functions for handling images in the application\n */\n\n// Base URL for the API server\n// Use environment variable if available, otherwise fallback to localhost:5000\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\nconsole.log('Image utils using API base URL:', API_BASE_URL);\n\n/**\n * Gets the full URL for an image from its relative path\n * @param {string} imageUrl - The image URL stored in the database\n * @returns {string} - The full URL that can be used in an img src attribute\n */\nexport const getFullImageUrl = imageUrl => {\n  if (!imageUrl) {\n    console.log('No image URL provided, using placeholder');\n    return 'https://via.placeholder.com/300x200?text=No+Image';\n  }\n\n  // Log the incoming URL\n  console.log('Processing image URL:', imageUrl);\n\n  // If the image URL is already absolute, return it as is\n  if (imageUrl.startsWith('http') || imageUrl.startsWith('data:')) {\n    console.log('Image URL is absolute, returning as is');\n    return imageUrl;\n  }\n  try {\n    // Make sure the image URL starts with a slash if it doesn't\n    const formattedUrl = imageUrl.startsWith('/') ? imageUrl : `/${imageUrl}`;\n\n    // Check if the URL contains \"uploads\" directory, if not, add it\n    const uploadsPath = formattedUrl.includes('/uploads/') ? formattedUrl : formattedUrl.startsWith('/uploads') ? formattedUrl : `/uploads${formattedUrl}`;\n\n    // Otherwise, prepend the API base URL\n    const fullUrl = `${API_BASE_URL}${uploadsPath}`;\n    console.log('Constructed full image URL:', fullUrl);\n    return fullUrl;\n  } catch (error) {\n    console.error('Error constructing image URL:', error);\n    return 'https://via.placeholder.com/300x200?text=Image+Error';\n  }\n};\n\n/**\n * Handles image loading errors by setting a placeholder image\n * @param {Event} event - The error event from the image\n */\nexport const handleImageError = event => {\n  console.error('Image loading error for:', event.target.src);\n  event.target.onerror = null; // Prevent infinite loop\n\n  // Try to determine the type of product from the element's context\n  const elementWidth = event.target.width;\n  const elementHeight = event.target.height;\n\n  // Choose a placeholder that matches the element's dimensions better\n  let placeholder = 'https://via.placeholder.com/300x200?text=Image+Not+Found';\n\n  // If it's a small image (like a thumbnail), use a smaller placeholder\n  if (elementWidth < 100 || elementHeight < 100) {\n    placeholder = 'https://via.placeholder.com/100x100?text=No+Image';\n  }\n  event.target.src = placeholder;\n\n  // Add a class to indicate it's a placeholder (for potential styling)\n  event.target.classList.add('image-placeholder');\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","console","log","getFullImageUrl","imageUrl","startsWith","formattedUrl","uploadsPath","includes","fullUrl","error","handleImageError","event","target","src","onerror","elementWidth","width","elementHeight","height","placeholder","classList","add"],"sources":["D:/GitHub Projects/Ayurvedic Product Distribution System/Online-Ayurvedic-Product-Distribution-System/frontend/src/utils/imageUtils.js"],"sourcesContent":["/**\n * Utility functions for handling images in the application\n */\n\n// Base URL for the API server\n// Use environment variable if available, otherwise fallback to localhost:5000\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\nconsole.log('Image utils using API base URL:', API_BASE_URL);\n\n/**\n * Gets the full URL for an image from its relative path\n * @param {string} imageUrl - The image URL stored in the database\n * @returns {string} - The full URL that can be used in an img src attribute\n */\nexport const getFullImageUrl = (imageUrl) => {\n  if (!imageUrl) {\n    console.log('No image URL provided, using placeholder');\n    return 'https://via.placeholder.com/300x200?text=No+Image';\n  }\n  \n  // Log the incoming URL\n  console.log('Processing image URL:', imageUrl);\n  \n  // If the image URL is already absolute, return it as is\n  if (imageUrl.startsWith('http') || imageUrl.startsWith('data:')) {\n    console.log('Image URL is absolute, returning as is');\n    return imageUrl;\n  }\n  \n  try {\n    // Make sure the image URL starts with a slash if it doesn't\n    const formattedUrl = imageUrl.startsWith('/') ? imageUrl : `/${imageUrl}`;\n    \n    // Check if the URL contains \"uploads\" directory, if not, add it\n    const uploadsPath = formattedUrl.includes('/uploads/') ? formattedUrl : \n      formattedUrl.startsWith('/uploads') ? formattedUrl : `/uploads${formattedUrl}`;\n    \n    // Otherwise, prepend the API base URL\n    const fullUrl = `${API_BASE_URL}${uploadsPath}`;\n    console.log('Constructed full image URL:', fullUrl);\n    return fullUrl;\n  } catch (error) {\n    console.error('Error constructing image URL:', error);\n    return 'https://via.placeholder.com/300x200?text=Image+Error';\n  }\n};\n\n/**\n * Handles image loading errors by setting a placeholder image\n * @param {Event} event - The error event from the image\n */\nexport const handleImageError = (event) => {\n  console.error('Image loading error for:', event.target.src);\n  event.target.onerror = null; // Prevent infinite loop\n  \n  // Try to determine the type of product from the element's context\n  const elementWidth = event.target.width;\n  const elementHeight = event.target.height;\n  \n  // Choose a placeholder that matches the element's dimensions better\n  let placeholder = 'https://via.placeholder.com/300x200?text=Image+Not+Found';\n  \n  // If it's a small image (like a thumbnail), use a smaller placeholder\n  if (elementWidth < 100 || elementHeight < 100) {\n    placeholder = 'https://via.placeholder.com/100x100?text=No+Image';\n  }\n  \n  event.target.src = placeholder;\n  \n  // Add a class to indicate it's a placeholder (for potential styling)\n  event.target.classList.add('image-placeholder');\n};\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAC7EC,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEL,YAAY,CAAC;;AAE5D;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMM,eAAe,GAAIC,QAAQ,IAAK;EAC3C,IAAI,CAACA,QAAQ,EAAE;IACbH,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;IACvD,OAAO,mDAAmD;EAC5D;;EAEA;EACAD,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEE,QAAQ,CAAC;;EAE9C;EACA,IAAIA,QAAQ,CAACC,UAAU,CAAC,MAAM,CAAC,IAAID,QAAQ,CAACC,UAAU,CAAC,OAAO,CAAC,EAAE;IAC/DJ,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;IACrD,OAAOE,QAAQ;EACjB;EAEA,IAAI;IACF;IACA,MAAME,YAAY,GAAGF,QAAQ,CAACC,UAAU,CAAC,GAAG,CAAC,GAAGD,QAAQ,GAAG,IAAIA,QAAQ,EAAE;;IAEzE;IACA,MAAMG,WAAW,GAAGD,YAAY,CAACE,QAAQ,CAAC,WAAW,CAAC,GAAGF,YAAY,GACnEA,YAAY,CAACD,UAAU,CAAC,UAAU,CAAC,GAAGC,YAAY,GAAG,WAAWA,YAAY,EAAE;;IAEhF;IACA,MAAMG,OAAO,GAAG,GAAGZ,YAAY,GAAGU,WAAW,EAAE;IAC/CN,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEO,OAAO,CAAC;IACnD,OAAOA,OAAO;EAChB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdT,OAAO,CAACS,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,OAAO,sDAAsD;EAC/D;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,GAAIC,KAAK,IAAK;EACzCX,OAAO,CAACS,KAAK,CAAC,0BAA0B,EAAEE,KAAK,CAACC,MAAM,CAACC,GAAG,CAAC;EAC3DF,KAAK,CAACC,MAAM,CAACE,OAAO,GAAG,IAAI,CAAC,CAAC;;EAE7B;EACA,MAAMC,YAAY,GAAGJ,KAAK,CAACC,MAAM,CAACI,KAAK;EACvC,MAAMC,aAAa,GAAGN,KAAK,CAACC,MAAM,CAACM,MAAM;;EAEzC;EACA,IAAIC,WAAW,GAAG,0DAA0D;;EAE5E;EACA,IAAIJ,YAAY,GAAG,GAAG,IAAIE,aAAa,GAAG,GAAG,EAAE;IAC7CE,WAAW,GAAG,mDAAmD;EACnE;EAEAR,KAAK,CAACC,MAAM,CAACC,GAAG,GAAGM,WAAW;;EAE9B;EACAR,KAAK,CAACC,MAAM,CAACQ,SAAS,CAACC,GAAG,CAAC,mBAAmB,CAAC;AACjD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}