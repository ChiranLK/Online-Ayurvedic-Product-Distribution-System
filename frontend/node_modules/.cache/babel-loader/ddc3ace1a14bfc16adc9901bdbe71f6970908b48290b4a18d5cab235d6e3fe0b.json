{"ast":null,"code":"// Cart utility functions\n/**\n * Add a product to the cart\n * @param {string} productId - ID of the product to add\n * @param {number} quantity - Quantity to add (default: 1)\n * @returns {object} - Updated cart\n */export const addToCart=function(productId){let quantity=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;// Get current cart from localStorage or initialize empty array\nconst cart=JSON.parse(localStorage.getItem('ayurvedicCart'))||[];// Check if product already exists in cart\nconst existingItemIndex=cart.findIndex(item=>item.productId===productId);if(existingItemIndex>=0){// Update quantity if product exists\ncart[existingItemIndex].quantity+=quantity;}else{// Add new item if product doesn't exist in cart\ncart.push({productId,quantity});}// Save updated cart to localStorage\nlocalStorage.setItem('ayurvedicCart',JSON.stringify(cart));// Dispatch custom event to notify other components (like CartIcon) that cart has changed\nwindow.dispatchEvent(new Event('cartUpdated'));return cart;};/**\n * Update a product's quantity in the cart\n * @param {string} productId - ID of the product to update\n * @param {number} quantity - New quantity\n * @returns {object} - Updated cart\n */export const updateCartItem=(productId,quantity)=>{if(quantity<1)return removeFromCart(productId);const cart=JSON.parse(localStorage.getItem('ayurvedicCart'))||[];const existingItemIndex=cart.findIndex(item=>item.productId===productId);if(existingItemIndex>=0){cart[existingItemIndex].quantity=quantity;localStorage.setItem('ayurvedicCart',JSON.stringify(cart));window.dispatchEvent(new Event('cartUpdated'));}return cart;};/**\n * Remove a product from the cart\n * @param {string} productId - ID of the product to remove\n * @returns {object} - Updated cart\n */export const removeFromCart=productId=>{const cart=JSON.parse(localStorage.getItem('ayurvedicCart'))||[];const updatedCart=cart.filter(item=>item.productId!==productId);localStorage.setItem('ayurvedicCart',JSON.stringify(updatedCart));window.dispatchEvent(new Event('cartUpdated'));return updatedCart;};/**\n * Clear all items from the cart\n */export const clearCart=()=>{localStorage.removeItem('ayurvedicCart');window.dispatchEvent(new Event('cartUpdated'));};/**\n * Get the current cart items\n * @returns {Array} - Cart items\n */export const getCart=()=>{return JSON.parse(localStorage.getItem('ayurvedicCart'))||[];};/**\n * Get the total number of items in the cart\n * @returns {number} - Total number of items\n */export const getCartCount=()=>{const cart=getCart();return cart.reduce((total,item)=>total+item.quantity,0);};/**\n * Check if a product is in the cart\n * @param {string} productId - ID of the product to check\n * @returns {boolean} - True if product is in cart\n */export const isInCart=productId=>{const cart=getCart();return cart.some(item=>item.productId===productId);};","map":{"version":3,"names":["addToCart","productId","quantity","arguments","length","undefined","cart","JSON","parse","localStorage","getItem","existingItemIndex","findIndex","item","push","setItem","stringify","window","dispatchEvent","Event","updateCartItem","removeFromCart","updatedCart","filter","clearCart","removeItem","getCart","getCartCount","reduce","total","isInCart","some"],"sources":["d:/GitHub Projects/Ayurvedic Product Distribution System/Online-Ayurvedic-Product-Distribution-System/frontend/src/utils/cartUtils.js"],"sourcesContent":["// Cart utility functions\n\n/**\n * Add a product to the cart\n * @param {string} productId - ID of the product to add\n * @param {number} quantity - Quantity to add (default: 1)\n * @returns {object} - Updated cart\n */\nexport const addToCart = (productId, quantity = 1) => {\n  // Get current cart from localStorage or initialize empty array\n  const cart = JSON.parse(localStorage.getItem('ayurvedicCart')) || [];\n  \n  // Check if product already exists in cart\n  const existingItemIndex = cart.findIndex(item => item.productId === productId);\n  \n  if (existingItemIndex >= 0) {\n    // Update quantity if product exists\n    cart[existingItemIndex].quantity += quantity;\n  } else {\n    // Add new item if product doesn't exist in cart\n    cart.push({ productId, quantity });\n  }\n  \n  // Save updated cart to localStorage\n  localStorage.setItem('ayurvedicCart', JSON.stringify(cart));\n  \n  // Dispatch custom event to notify other components (like CartIcon) that cart has changed\n  window.dispatchEvent(new Event('cartUpdated'));\n  \n  return cart;\n};\n\n/**\n * Update a product's quantity in the cart\n * @param {string} productId - ID of the product to update\n * @param {number} quantity - New quantity\n * @returns {object} - Updated cart\n */\nexport const updateCartItem = (productId, quantity) => {\n  if (quantity < 1) return removeFromCart(productId);\n  \n  const cart = JSON.parse(localStorage.getItem('ayurvedicCart')) || [];\n  const existingItemIndex = cart.findIndex(item => item.productId === productId);\n  \n  if (existingItemIndex >= 0) {\n    cart[existingItemIndex].quantity = quantity;\n    localStorage.setItem('ayurvedicCart', JSON.stringify(cart));\n    window.dispatchEvent(new Event('cartUpdated'));\n  }\n  \n  return cart;\n};\n\n/**\n * Remove a product from the cart\n * @param {string} productId - ID of the product to remove\n * @returns {object} - Updated cart\n */\nexport const removeFromCart = (productId) => {\n  const cart = JSON.parse(localStorage.getItem('ayurvedicCart')) || [];\n  const updatedCart = cart.filter(item => item.productId !== productId);\n  \n  localStorage.setItem('ayurvedicCart', JSON.stringify(updatedCart));\n  window.dispatchEvent(new Event('cartUpdated'));\n  \n  return updatedCart;\n};\n\n/**\n * Clear all items from the cart\n */\nexport const clearCart = () => {\n  localStorage.removeItem('ayurvedicCart');\n  window.dispatchEvent(new Event('cartUpdated'));\n};\n\n/**\n * Get the current cart items\n * @returns {Array} - Cart items\n */\nexport const getCart = () => {\n  return JSON.parse(localStorage.getItem('ayurvedicCart')) || [];\n};\n\n/**\n * Get the total number of items in the cart\n * @returns {number} - Total number of items\n */\nexport const getCartCount = () => {\n  const cart = getCart();\n  return cart.reduce((total, item) => total + item.quantity, 0);\n};\n\n/**\n * Check if a product is in the cart\n * @param {string} productId - ID of the product to check\n * @returns {boolean} - True if product is in cart\n */\nexport const isInCart = (productId) => {\n  const cart = getCart();\n  return cart.some(item => item.productId === productId);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}