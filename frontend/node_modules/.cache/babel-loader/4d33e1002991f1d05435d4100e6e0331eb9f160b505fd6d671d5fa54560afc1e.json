{"ast":null,"code":"var _jsxFileName = \"D:\\\\GitHub Projects\\\\Ayurvedic Product Distribution System\\\\Online-Ayurvedic-Product-Distribution-System\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport api from '../config/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nconst AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token') || null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Configure axios to use token\n  useEffect(() => {\n    if (token) {\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    } else {\n      delete axios.defaults.headers.common['Authorization'];\n    }\n  }, [token]);\n\n  // Load user on initial load\n  useEffect(() => {\n    const loadUser = async () => {\n      if (!token) {\n        setLoading(false);\n        return;\n      }\n      try {\n        const res = await api.get('/api/auth/me');\n        setCurrentUser(res.data.data);\n      } catch (err) {\n        console.error('Error loading user:', err);\n        // If token is invalid or expired, clear it\n        localStorage.removeItem('token');\n        setToken(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadUser();\n  }, [token]);\n\n  // Register user\n  const register = async userData => {\n    try {\n      setLoading(true);\n      setError(null);\n      console.log('Registering user with data:', userData);\n      const res = await api.post('/api/auth/register', userData);\n      console.log('Registration response:', res.data);\n\n      // Check if the response contains token and user\n      if (!res.data.token || !res.data.user) {\n        console.error('Invalid response format:', res.data);\n        setError('Registration failed: Invalid server response');\n        throw new Error('Invalid response format');\n      }\n      const {\n        token,\n        user\n      } = res.data;\n\n      // Save token to localStorage\n      localStorage.setItem('token', token);\n      setToken(token);\n      setCurrentUser(user);\n      return user;\n    } catch (err) {\n      console.error('Registration error:', err);\n      // More detailed error handling\n      if (err.response) {\n        console.error('Error response:', err.response.data);\n        setError(err.response.data.message || 'Registration failed: Server error');\n      } else if (err.request) {\n        console.error('No response received:', err.request);\n        setError('Registration failed: No response from server. Please check if the backend is running.');\n      } else {\n        console.error('Error setting up request:', err.message);\n        setError(`Registration failed: ${err.message}`);\n      }\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Login user\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const res = await api.post('/api/auth/login', {\n        email,\n        password\n      });\n      const {\n        token,\n        user\n      } = res.data;\n\n      // Save token to localStorage\n      localStorage.setItem('token', token);\n      setToken(token);\n      setCurrentUser(user);\n      return user;\n    } catch (err) {\n      var _err$response, _err$response$data;\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'Login failed');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Logout user\n  const logout = () => {\n    localStorage.removeItem('token');\n    setToken(null);\n    setCurrentUser(null);\n  };\n\n  // Check if user has a specific role\n  const hasRole = roles => {\n    if (!currentUser || !currentUser.role) return false;\n    if (Array.isArray(roles)) {\n      return roles.includes(currentUser.role);\n    }\n    return currentUser.role === roles;\n  };\n\n  // Check if current user is admin\n  const isAdmin = () => hasRole('admin');\n\n  // Check if current user is seller\n  const isSeller = () => hasRole('seller');\n\n  // Check if current user is customer\n  const isCustomer = () => hasRole('customer');\n\n  // Update user profile\n  const updateProfile = async profileData => {\n    try {\n      setLoading(true);\n      setError(null);\n      const res = await api.put('/api/profile', profileData);\n      if (!res.data.success || !res.data.data) {\n        throw new Error('Failed to update profile');\n      }\n\n      // Update current user in context\n      setCurrentUser(res.data.data);\n      return res.data.data;\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      setError(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || 'Failed to update profile');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Update user password\n  const updatePassword = async (currentPassword, newPassword) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const res = await api.put('/api/profile/password', {\n        currentPassword,\n        newPassword\n      });\n      if (!res.data.success) {\n        throw new Error('Failed to update password');\n      }\n      return true;\n    } catch (err) {\n      var _err$response3, _err$response3$data;\n      setError(((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.message) || 'Failed to update password');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Computed property to determine authentication status\n  const authenticated = !!token && !!currentUser;\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      currentUser,\n      token,\n      loading,\n      error,\n      isAuthenticated: authenticated,\n      register,\n      login,\n      logout,\n      updateProfile,\n      updatePassword,\n      hasRole,\n      isAdmin,\n      isSeller,\n      isCustomer,\n      setError\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"/DscMc5z+Wq4PX6rTqNwLxShNmE=\");\n_c = AuthProvider;\nexport default AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","api","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","currentUser","setCurrentUser","token","setToken","localStorage","getItem","loading","setLoading","error","setError","defaults","headers","common","loadUser","res","get","data","err","console","removeItem","register","userData","log","post","user","Error","setItem","response","message","request","login","email","password","_err$response","_err$response$data","logout","hasRole","roles","role","Array","isArray","includes","isAdmin","isSeller","isCustomer","updateProfile","profileData","put","success","_err$response2","_err$response2$data","updatePassword","currentPassword","newPassword","_err$response3","_err$response3$data","authenticated","Provider","value","isAuthenticated","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/GitHub Projects/Ayurvedic Product Distribution System/Online-Ayurvedic-Product-Distribution-System/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport api from '../config/api';\n\nexport const AuthContext = createContext();\n\nconst AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token') || null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Configure axios to use token\n  useEffect(() => {\n    if (token) {\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    } else {\n      delete axios.defaults.headers.common['Authorization'];\n    }\n  }, [token]);\n\n  // Load user on initial load\n  useEffect(() => {\n    const loadUser = async () => {\n      if (!token) {\n        setLoading(false);\n        return;\n      }\n\n      try {\n        const res = await api.get('/api/auth/me');\n        setCurrentUser(res.data.data);\n      } catch (err) {\n        console.error('Error loading user:', err);\n        // If token is invalid or expired, clear it\n        localStorage.removeItem('token');\n        setToken(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadUser();\n  }, [token]);\n\n  // Register user\n  const register = async (userData) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      console.log('Registering user with data:', userData);\n      const res = await api.post('/api/auth/register', userData);\n      console.log('Registration response:', res.data);\n      \n      // Check if the response contains token and user\n      if (!res.data.token || !res.data.user) {\n        console.error('Invalid response format:', res.data);\n        setError('Registration failed: Invalid server response');\n        throw new Error('Invalid response format');\n      }\n      \n      const { token, user } = res.data;\n      \n      // Save token to localStorage\n      localStorage.setItem('token', token);\n      setToken(token);\n      setCurrentUser(user);\n      \n      return user;\n    } catch (err) {\n      console.error('Registration error:', err);\n      // More detailed error handling\n      if (err.response) {\n        console.error('Error response:', err.response.data);\n        setError(err.response.data.message || 'Registration failed: Server error');\n      } else if (err.request) {\n        console.error('No response received:', err.request);\n        setError('Registration failed: No response from server. Please check if the backend is running.');\n      } else {\n        console.error('Error setting up request:', err.message);\n        setError(`Registration failed: ${err.message}`);\n      }\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Login user\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const res = await api.post('/api/auth/login', { email, password });\n      \n      const { token, user } = res.data;\n      \n      // Save token to localStorage\n      localStorage.setItem('token', token);\n      setToken(token);\n      setCurrentUser(user);\n      \n      return user;\n    } catch (err) {\n      setError(err.response?.data?.message || 'Login failed');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Logout user\n  const logout = () => {\n    localStorage.removeItem('token');\n    setToken(null);\n    setCurrentUser(null);\n  };\n\n  // Check if user has a specific role\n  const hasRole = (roles) => {\n    if (!currentUser || !currentUser.role) return false;\n    \n    if (Array.isArray(roles)) {\n      return roles.includes(currentUser.role);\n    }\n    \n    return currentUser.role === roles;\n  };\n\n  // Check if current user is admin\n  const isAdmin = () => hasRole('admin');\n  \n  // Check if current user is seller\n  const isSeller = () => hasRole('seller');\n  \n  // Check if current user is customer\n  const isCustomer = () => hasRole('customer');\n\n  // Update user profile\n  const updateProfile = async (profileData) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const res = await api.put('/api/profile', profileData);\n      \n      if (!res.data.success || !res.data.data) {\n        throw new Error('Failed to update profile');\n      }\n      \n      // Update current user in context\n      setCurrentUser(res.data.data);\n      \n      return res.data.data;\n    } catch (err) {\n      setError(err.response?.data?.message || 'Failed to update profile');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Update user password\n  const updatePassword = async (currentPassword, newPassword) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const res = await api.put('/api/profile/password', { \n        currentPassword, \n        newPassword \n      });\n      \n      if (!res.data.success) {\n        throw new Error('Failed to update password');\n      }\n      \n      return true;\n    } catch (err) {\n      setError(err.response?.data?.message || 'Failed to update password');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Computed property to determine authentication status\n  const authenticated = !!token && !!currentUser;\n\n  return (\n    <AuthContext.Provider\n      value={{\n        currentUser,\n        token,\n        loading,\n        error,\n        isAuthenticated: authenticated,\n        register,\n        login,\n        logout,\n        updateProfile,\n        updatePassword,\n        hasRole,\n        isAdmin,\n        isSeller,\n        isCustomer,\n        setError\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthProvider;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,GAAG,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,OAAO,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAE1C,MAAMQ,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACrC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAACc,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC;EACzE,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACkB,KAAK,EAAEC,QAAQ,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACAC,SAAS,CAAC,MAAM;IACd,IAAIW,KAAK,EAAE;MACTV,KAAK,CAACkB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUV,KAAK,EAAE;IACpE,CAAC,MAAM;MACL,OAAOV,KAAK,CAACkB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC;IACvD;EACF,CAAC,EAAE,CAACV,KAAK,CAAC,CAAC;;EAEX;EACAX,SAAS,CAAC,MAAM;IACd,MAAMsB,QAAQ,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAI,CAACX,KAAK,EAAE;QACVK,UAAU,CAAC,KAAK,CAAC;QACjB;MACF;MAEA,IAAI;QACF,MAAMO,GAAG,GAAG,MAAMrB,GAAG,CAACsB,GAAG,CAAC,cAAc,CAAC;QACzCd,cAAc,CAACa,GAAG,CAACE,IAAI,CAACA,IAAI,CAAC;MAC/B,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZC,OAAO,CAACV,KAAK,CAAC,qBAAqB,EAAES,GAAG,CAAC;QACzC;QACAb,YAAY,CAACe,UAAU,CAAC,OAAO,CAAC;QAChChB,QAAQ,CAAC,IAAI,CAAC;MAChB,CAAC,SAAS;QACRI,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDM,QAAQ,CAAC,CAAC;EACZ,CAAC,EAAE,CAACX,KAAK,CAAC,CAAC;;EAEX;EACA,MAAMkB,QAAQ,GAAG,MAAOC,QAAQ,IAAK;IACnC,IAAI;MACFd,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MAEdS,OAAO,CAACI,GAAG,CAAC,6BAA6B,EAAED,QAAQ,CAAC;MACpD,MAAMP,GAAG,GAAG,MAAMrB,GAAG,CAAC8B,IAAI,CAAC,oBAAoB,EAAEF,QAAQ,CAAC;MAC1DH,OAAO,CAACI,GAAG,CAAC,wBAAwB,EAAER,GAAG,CAACE,IAAI,CAAC;;MAE/C;MACA,IAAI,CAACF,GAAG,CAACE,IAAI,CAACd,KAAK,IAAI,CAACY,GAAG,CAACE,IAAI,CAACQ,IAAI,EAAE;QACrCN,OAAO,CAACV,KAAK,CAAC,0BAA0B,EAAEM,GAAG,CAACE,IAAI,CAAC;QACnDP,QAAQ,CAAC,8CAA8C,CAAC;QACxD,MAAM,IAAIgB,KAAK,CAAC,yBAAyB,CAAC;MAC5C;MAEA,MAAM;QAAEvB,KAAK;QAAEsB;MAAK,CAAC,GAAGV,GAAG,CAACE,IAAI;;MAEhC;MACAZ,YAAY,CAACsB,OAAO,CAAC,OAAO,EAAExB,KAAK,CAAC;MACpCC,QAAQ,CAACD,KAAK,CAAC;MACfD,cAAc,CAACuB,IAAI,CAAC;MAEpB,OAAOA,IAAI;IACb,CAAC,CAAC,OAAOP,GAAG,EAAE;MACZC,OAAO,CAACV,KAAK,CAAC,qBAAqB,EAAES,GAAG,CAAC;MACzC;MACA,IAAIA,GAAG,CAACU,QAAQ,EAAE;QAChBT,OAAO,CAACV,KAAK,CAAC,iBAAiB,EAAES,GAAG,CAACU,QAAQ,CAACX,IAAI,CAAC;QACnDP,QAAQ,CAACQ,GAAG,CAACU,QAAQ,CAACX,IAAI,CAACY,OAAO,IAAI,mCAAmC,CAAC;MAC5E,CAAC,MAAM,IAAIX,GAAG,CAACY,OAAO,EAAE;QACtBX,OAAO,CAACV,KAAK,CAAC,uBAAuB,EAAES,GAAG,CAACY,OAAO,CAAC;QACnDpB,QAAQ,CAAC,uFAAuF,CAAC;MACnG,CAAC,MAAM;QACLS,OAAO,CAACV,KAAK,CAAC,2BAA2B,EAAES,GAAG,CAACW,OAAO,CAAC;QACvDnB,QAAQ,CAAC,wBAAwBQ,GAAG,CAACW,OAAO,EAAE,CAAC;MACjD;MACA,MAAMX,GAAG;IACX,CAAC,SAAS;MACRV,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;;EAED;EACA,MAAMuB,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACvC,IAAI;MACFzB,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MAEd,MAAMK,GAAG,GAAG,MAAMrB,GAAG,CAAC8B,IAAI,CAAC,iBAAiB,EAAE;QAAEQ,KAAK;QAAEC;MAAS,CAAC,CAAC;MAElE,MAAM;QAAE9B,KAAK;QAAEsB;MAAK,CAAC,GAAGV,GAAG,CAACE,IAAI;;MAEhC;MACAZ,YAAY,CAACsB,OAAO,CAAC,OAAO,EAAExB,KAAK,CAAC;MACpCC,QAAQ,CAACD,KAAK,CAAC;MACfD,cAAc,CAACuB,IAAI,CAAC;MAEpB,OAAOA,IAAI;IACb,CAAC,CAAC,OAAOP,GAAG,EAAE;MAAA,IAAAgB,aAAA,EAAAC,kBAAA;MACZzB,QAAQ,CAAC,EAAAwB,aAAA,GAAAhB,GAAG,CAACU,QAAQ,cAAAM,aAAA,wBAAAC,kBAAA,GAAZD,aAAA,CAAcjB,IAAI,cAAAkB,kBAAA,uBAAlBA,kBAAA,CAAoBN,OAAO,KAAI,cAAc,CAAC;MACvD,MAAMX,GAAG;IACX,CAAC,SAAS;MACRV,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;;EAED;EACA,MAAM4B,MAAM,GAAGA,CAAA,KAAM;IACnB/B,YAAY,CAACe,UAAU,CAAC,OAAO,CAAC;IAChChB,QAAQ,CAAC,IAAI,CAAC;IACdF,cAAc,CAAC,IAAI,CAAC;EACtB,CAAC;;EAED;EACA,MAAMmC,OAAO,GAAIC,KAAK,IAAK;IACzB,IAAI,CAACrC,WAAW,IAAI,CAACA,WAAW,CAACsC,IAAI,EAAE,OAAO,KAAK;IAEnD,IAAIC,KAAK,CAACC,OAAO,CAACH,KAAK,CAAC,EAAE;MACxB,OAAOA,KAAK,CAACI,QAAQ,CAACzC,WAAW,CAACsC,IAAI,CAAC;IACzC;IAEA,OAAOtC,WAAW,CAACsC,IAAI,KAAKD,KAAK;EACnC,CAAC;;EAED;EACA,MAAMK,OAAO,GAAGA,CAAA,KAAMN,OAAO,CAAC,OAAO,CAAC;;EAEtC;EACA,MAAMO,QAAQ,GAAGA,CAAA,KAAMP,OAAO,CAAC,QAAQ,CAAC;;EAExC;EACA,MAAMQ,UAAU,GAAGA,CAAA,KAAMR,OAAO,CAAC,UAAU,CAAC;;EAE5C;EACA,MAAMS,aAAa,GAAG,MAAOC,WAAW,IAAK;IAC3C,IAAI;MACFvC,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MAEd,MAAMK,GAAG,GAAG,MAAMrB,GAAG,CAACsD,GAAG,CAAC,cAAc,EAAED,WAAW,CAAC;MAEtD,IAAI,CAAChC,GAAG,CAACE,IAAI,CAACgC,OAAO,IAAI,CAAClC,GAAG,CAACE,IAAI,CAACA,IAAI,EAAE;QACvC,MAAM,IAAIS,KAAK,CAAC,0BAA0B,CAAC;MAC7C;;MAEA;MACAxB,cAAc,CAACa,GAAG,CAACE,IAAI,CAACA,IAAI,CAAC;MAE7B,OAAOF,GAAG,CAACE,IAAI,CAACA,IAAI;IACtB,CAAC,CAAC,OAAOC,GAAG,EAAE;MAAA,IAAAgC,cAAA,EAAAC,mBAAA;MACZzC,QAAQ,CAAC,EAAAwC,cAAA,GAAAhC,GAAG,CAACU,QAAQ,cAAAsB,cAAA,wBAAAC,mBAAA,GAAZD,cAAA,CAAcjC,IAAI,cAAAkC,mBAAA,uBAAlBA,mBAAA,CAAoBtB,OAAO,KAAI,0BAA0B,CAAC;MACnE,MAAMX,GAAG;IACX,CAAC,SAAS;MACRV,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;;EAED;EACA,MAAM4C,cAAc,GAAG,MAAAA,CAAOC,eAAe,EAAEC,WAAW,KAAK;IAC7D,IAAI;MACF9C,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MAEd,MAAMK,GAAG,GAAG,MAAMrB,GAAG,CAACsD,GAAG,CAAC,uBAAuB,EAAE;QACjDK,eAAe;QACfC;MACF,CAAC,CAAC;MAEF,IAAI,CAACvC,GAAG,CAACE,IAAI,CAACgC,OAAO,EAAE;QACrB,MAAM,IAAIvB,KAAK,CAAC,2BAA2B,CAAC;MAC9C;MAEA,OAAO,IAAI;IACb,CAAC,CAAC,OAAOR,GAAG,EAAE;MAAA,IAAAqC,cAAA,EAAAC,mBAAA;MACZ9C,QAAQ,CAAC,EAAA6C,cAAA,GAAArC,GAAG,CAACU,QAAQ,cAAA2B,cAAA,wBAAAC,mBAAA,GAAZD,cAAA,CAActC,IAAI,cAAAuC,mBAAA,uBAAlBA,mBAAA,CAAoB3B,OAAO,KAAI,2BAA2B,CAAC;MACpE,MAAMX,GAAG;IACX,CAAC,SAAS;MACRV,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;;EAED;EACA,MAAMiD,aAAa,GAAG,CAAC,CAACtD,KAAK,IAAI,CAAC,CAACF,WAAW;EAE9C,oBACEL,OAAA,CAACC,WAAW,CAAC6D,QAAQ;IACnBC,KAAK,EAAE;MACL1D,WAAW;MACXE,KAAK;MACLI,OAAO;MACPE,KAAK;MACLmD,eAAe,EAAEH,aAAa;MAC9BpC,QAAQ;MACRU,KAAK;MACLK,MAAM;MACNU,aAAa;MACbM,cAAc;MACdf,OAAO;MACPM,OAAO;MACPC,QAAQ;MACRC,UAAU;MACVnC;IACF,CAAE;IAAAX,QAAA,EAEDA;EAAQ;IAAA8D,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAChE,EAAA,CAhNIF,YAAY;AAAAmE,EAAA,GAAZnE,YAAY;AAkNlB,eAAeA,YAAY;AAAC,IAAAmE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}