{"ast":null,"code":"// Cart utility functions\n\n/**\n * Add a product to the cart\n * @param {string} productId - ID of the product to add\n * @param {number} quantity - Quantity to add (default: 1)\n * @returns {object} - Updated cart\n */\nexport const addToCart = (productId, quantity = 1) => {\n  // Get current cart from localStorage or initialize empty array\n  const cart = JSON.parse(localStorage.getItem('ayurvedicCart')) || [];\n  console.log('Cart before update:', cart);\n\n  // Check if product already exists in cart\n  const existingItemIndex = cart.findIndex(item => item.productId === productId);\n  if (existingItemIndex >= 0) {\n    // Update quantity if product exists\n    cart[existingItemIndex].quantity += quantity;\n    console.log('Updated existing item in cart:', cart[existingItemIndex]);\n  } else {\n    // Add new item if product doesn't exist in cart\n    cart.push({\n      productId,\n      quantity\n    });\n    console.log('Added new item to cart:', {\n      productId,\n      quantity\n    });\n  }\n\n  // Save updated cart to localStorage\n  localStorage.setItem('ayurvedicCart', JSON.stringify(cart));\n  console.log('Cart saved to localStorage:', JSON.stringify(cart));\n\n  // Dispatch custom event to notify other components (like CartIcon) that cart has changed\n  window.dispatchEvent(new Event('cartUpdated'));\n  console.log('cartUpdated event dispatched');\n  return cart;\n};\n\n/**\n * Update a product's quantity in the cart\n * @param {string} productId - ID of the product to update\n * @param {number} quantity - New quantity\n * @returns {object} - Updated cart\n */\nexport const updateCartItem = (productId, quantity) => {\n  if (quantity < 1) return removeFromCart(productId);\n  const cart = JSON.parse(localStorage.getItem('ayurvedicCart')) || [];\n  const existingItemIndex = cart.findIndex(item => item.productId === productId);\n  if (existingItemIndex >= 0) {\n    cart[existingItemIndex].quantity = quantity;\n    localStorage.setItem('ayurvedicCart', JSON.stringify(cart));\n    window.dispatchEvent(new Event('cartUpdated'));\n  }\n  return cart;\n};\n\n/**\n * Remove a product from the cart\n * @param {string} productId - ID of the product to remove\n * @returns {object} - Updated cart\n */\nexport const removeFromCart = productId => {\n  const cart = JSON.parse(localStorage.getItem('ayurvedicCart')) || [];\n  const updatedCart = cart.filter(item => item.productId !== productId);\n  localStorage.setItem('ayurvedicCart', JSON.stringify(updatedCart));\n  window.dispatchEvent(new Event('cartUpdated'));\n  return updatedCart;\n};\n\n/**\n * Clear all items from the cart\n */\nexport const clearCart = () => {\n  localStorage.removeItem('ayurvedicCart');\n  window.dispatchEvent(new Event('cartUpdated'));\n};\n\n/**\n * Get the current cart items\n * @returns {Array} - Cart items\n */\nexport const getCart = () => {\n  return JSON.parse(localStorage.getItem('ayurvedicCart')) || [];\n};\n\n/**\n * Get the total number of items in the cart\n * @returns {number} - Total number of items\n */\nexport const getCartCount = () => {\n  const cart = getCart();\n  return cart.reduce((total, item) => total + item.quantity, 0);\n};\n\n/**\n * Check if a product is in the cart\n * @param {string} productId - ID of the product to check\n * @returns {boolean} - True if product is in cart\n */\nexport const isInCart = productId => {\n  const cart = getCart();\n  return cart.some(item => item.productId === productId);\n};","map":{"version":3,"names":["addToCart","productId","quantity","cart","JSON","parse","localStorage","getItem","console","log","existingItemIndex","findIndex","item","push","setItem","stringify","window","dispatchEvent","Event","updateCartItem","removeFromCart","updatedCart","filter","clearCart","removeItem","getCart","getCartCount","reduce","total","isInCart","some"],"sources":["D:/GitHub Projects/Ayurvedic Product Distribution System/Online-Ayurvedic-Product-Distribution-System/frontend/src/utils/cartUtils.js"],"sourcesContent":["// Cart utility functions\n\n/**\n * Add a product to the cart\n * @param {string} productId - ID of the product to add\n * @param {number} quantity - Quantity to add (default: 1)\n * @returns {object} - Updated cart\n */\nexport const addToCart = (productId, quantity = 1) => {\n  // Get current cart from localStorage or initialize empty array\n  const cart = JSON.parse(localStorage.getItem('ayurvedicCart')) || [];\n  console.log('Cart before update:', cart);\n  \n  // Check if product already exists in cart\n  const existingItemIndex = cart.findIndex(item => item.productId === productId);\n  \n  if (existingItemIndex >= 0) {\n    // Update quantity if product exists\n    cart[existingItemIndex].quantity += quantity;\n    console.log('Updated existing item in cart:', cart[existingItemIndex]);\n  } else {\n    // Add new item if product doesn't exist in cart\n    cart.push({ productId, quantity });\n    console.log('Added new item to cart:', { productId, quantity });\n  }\n  \n  // Save updated cart to localStorage\n  localStorage.setItem('ayurvedicCart', JSON.stringify(cart));\n  console.log('Cart saved to localStorage:', JSON.stringify(cart));\n  \n  // Dispatch custom event to notify other components (like CartIcon) that cart has changed\n  window.dispatchEvent(new Event('cartUpdated'));\n  console.log('cartUpdated event dispatched');\n  \n  return cart;\n};\n\n/**\n * Update a product's quantity in the cart\n * @param {string} productId - ID of the product to update\n * @param {number} quantity - New quantity\n * @returns {object} - Updated cart\n */\nexport const updateCartItem = (productId, quantity) => {\n  if (quantity < 1) return removeFromCart(productId);\n  \n  const cart = JSON.parse(localStorage.getItem('ayurvedicCart')) || [];\n  const existingItemIndex = cart.findIndex(item => item.productId === productId);\n  \n  if (existingItemIndex >= 0) {\n    cart[existingItemIndex].quantity = quantity;\n    localStorage.setItem('ayurvedicCart', JSON.stringify(cart));\n    window.dispatchEvent(new Event('cartUpdated'));\n  }\n  \n  return cart;\n};\n\n/**\n * Remove a product from the cart\n * @param {string} productId - ID of the product to remove\n * @returns {object} - Updated cart\n */\nexport const removeFromCart = (productId) => {\n  const cart = JSON.parse(localStorage.getItem('ayurvedicCart')) || [];\n  const updatedCart = cart.filter(item => item.productId !== productId);\n  \n  localStorage.setItem('ayurvedicCart', JSON.stringify(updatedCart));\n  window.dispatchEvent(new Event('cartUpdated'));\n  \n  return updatedCart;\n};\n\n/**\n * Clear all items from the cart\n */\nexport const clearCart = () => {\n  localStorage.removeItem('ayurvedicCart');\n  window.dispatchEvent(new Event('cartUpdated'));\n};\n\n/**\n * Get the current cart items\n * @returns {Array} - Cart items\n */\nexport const getCart = () => {\n  return JSON.parse(localStorage.getItem('ayurvedicCart')) || [];\n};\n\n/**\n * Get the total number of items in the cart\n * @returns {number} - Total number of items\n */\nexport const getCartCount = () => {\n  const cart = getCart();\n  return cart.reduce((total, item) => total + item.quantity, 0);\n};\n\n/**\n * Check if a product is in the cart\n * @param {string} productId - ID of the product to check\n * @returns {boolean} - True if product is in cart\n */\nexport const isInCart = (productId) => {\n  const cart = getCart();\n  return cart.some(item => item.productId === productId);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}