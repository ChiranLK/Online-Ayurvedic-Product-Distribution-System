{"ast":null,"code":"var _jsxFileName = \"D:\\\\GitHub Projects\\\\Ayurvedic Product Distribution System\\\\Online-Ayurvedic-Product-Distribution-System\\\\frontend\\\\src\\\\context\\\\ModalContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext } from 'react';\nimport Modal from '../components/common/Modal';\n\n// Create a context for the modal\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ModalContext = /*#__PURE__*/createContext();\n\n// Provider component that will wrap your app\nexport const ModalProvider = ({\n  children\n}) => {\n  _s();\n  const [modalState, setModalState] = useState({\n    isOpen: false,\n    title: '',\n    message: '',\n    confirmText: 'OK',\n    cancelText: '',\n    onConfirm: null,\n    type: 'info'\n  });\n\n  // Function to open the modal with given parameters\n  const openModal = ({\n    title = '',\n    message = '',\n    confirmText = 'OK',\n    cancelText = '',\n    onConfirm = null,\n    type = 'info'\n  }) => {\n    setModalState({\n      isOpen: true,\n      title,\n      message,\n      confirmText,\n      cancelText,\n      onConfirm,\n      type\n    });\n  };\n\n  // Function to close the modal\n  const closeModal = () => {\n    setModalState({\n      ...modalState,\n      isOpen: false\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(ModalContext.Provider, {\n    value: {\n      openModal,\n      closeModal\n    },\n    children: [children, /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: modalState.isOpen,\n      onClose: closeModal,\n      title: modalState.title,\n      message: modalState.message,\n      confirmText: modalState.confirmText,\n      cancelText: modalState.cancelText,\n      onConfirm: modalState.onConfirm,\n      type: modalState.type\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use the modal context\n_s(ModalProvider, \"Bh/ogfXyTrVXz3STDiszcWGBS4c=\");\n_c = ModalProvider;\nexport const useModal = () => {\n  _s2();\n  return useContext(ModalContext);\n};\n_s2(useModal, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"ModalProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","Modal","jsxDEV","_jsxDEV","ModalContext","ModalProvider","children","_s","modalState","setModalState","isOpen","title","message","confirmText","cancelText","onConfirm","type","openModal","closeModal","Provider","value","onClose","fileName","_jsxFileName","lineNumber","columnNumber","_c","useModal","_s2","$RefreshReg$"],"sources":["D:/GitHub Projects/Ayurvedic Product Distribution System/Online-Ayurvedic-Product-Distribution-System/frontend/src/context/ModalContext.js"],"sourcesContent":["import React, { createContext, useState, useContext } from 'react';\nimport Modal from '../components/common/Modal';\n\n// Create a context for the modal\nconst ModalContext = createContext();\n\n// Provider component that will wrap your app\nexport const ModalProvider = ({ children }) => {\n  const [modalState, setModalState] = useState({\n    isOpen: false,\n    title: '',\n    message: '',\n    confirmText: 'OK',\n    cancelText: '',\n    onConfirm: null,\n    type: 'info',\n  });\n\n  // Function to open the modal with given parameters\n  const openModal = ({\n    title = '',\n    message = '',\n    confirmText = 'OK',\n    cancelText = '',\n    onConfirm = null,\n    type = 'info',\n  }) => {\n    setModalState({\n      isOpen: true,\n      title,\n      message,\n      confirmText,\n      cancelText,\n      onConfirm,\n      type,\n    });\n  };\n\n  // Function to close the modal\n  const closeModal = () => {\n    setModalState({ ...modalState, isOpen: false });\n  };\n\n  return (\n    <ModalContext.Provider value={{ openModal, closeModal }}>\n      {children}\n      <Modal\n        isOpen={modalState.isOpen}\n        onClose={closeModal}\n        title={modalState.title}\n        message={modalState.message}\n        confirmText={modalState.confirmText}\n        cancelText={modalState.cancelText}\n        onConfirm={modalState.onConfirm}\n        type={modalState.type}\n      />\n    </ModalContext.Provider>\n  );\n};\n\n// Custom hook to use the modal context\nexport const useModal = () => useContext(ModalContext);\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AAClE,OAAOC,KAAK,MAAM,4BAA4B;;AAE9C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,gBAAGN,aAAa,CAAC,CAAC;;AAEpC;AACA,OAAO,MAAMO,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC;IAC3CW,MAAM,EAAE,KAAK;IACbC,KAAK,EAAE,EAAE;IACTC,OAAO,EAAE,EAAE;IACXC,WAAW,EAAE,IAAI;IACjBC,UAAU,EAAE,EAAE;IACdC,SAAS,EAAE,IAAI;IACfC,IAAI,EAAE;EACR,CAAC,CAAC;;EAEF;EACA,MAAMC,SAAS,GAAGA,CAAC;IACjBN,KAAK,GAAG,EAAE;IACVC,OAAO,GAAG,EAAE;IACZC,WAAW,GAAG,IAAI;IAClBC,UAAU,GAAG,EAAE;IACfC,SAAS,GAAG,IAAI;IAChBC,IAAI,GAAG;EACT,CAAC,KAAK;IACJP,aAAa,CAAC;MACZC,MAAM,EAAE,IAAI;MACZC,KAAK;MACLC,OAAO;MACPC,WAAW;MACXC,UAAU;MACVC,SAAS;MACTC;IACF,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAME,UAAU,GAAGA,CAAA,KAAM;IACvBT,aAAa,CAAC;MAAE,GAAGD,UAAU;MAAEE,MAAM,EAAE;IAAM,CAAC,CAAC;EACjD,CAAC;EAED,oBACEP,OAAA,CAACC,YAAY,CAACe,QAAQ;IAACC,KAAK,EAAE;MAAEH,SAAS;MAAEC;IAAW,CAAE;IAAAZ,QAAA,GACrDA,QAAQ,eACTH,OAAA,CAACF,KAAK;MACJS,MAAM,EAAEF,UAAU,CAACE,MAAO;MAC1BW,OAAO,EAAEH,UAAW;MACpBP,KAAK,EAAEH,UAAU,CAACG,KAAM;MACxBC,OAAO,EAAEJ,UAAU,CAACI,OAAQ;MAC5BC,WAAW,EAAEL,UAAU,CAACK,WAAY;MACpCC,UAAU,EAAEN,UAAU,CAACM,UAAW;MAClCC,SAAS,EAAEP,UAAU,CAACO,SAAU;MAChCC,IAAI,EAAER,UAAU,CAACQ;IAAK;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACmB,CAAC;AAE5B,CAAC;;AAED;AAAAlB,EAAA,CArDaF,aAAa;AAAAqB,EAAA,GAAbrB,aAAa;AAsD1B,OAAO,MAAMsB,QAAQ,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAM5B,UAAU,CAACI,YAAY,CAAC;AAAA;AAACwB,GAAA,CAA1CD,QAAQ;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}