{"ast":null,"code":"var _jsxFileName = \"d:\\\\GitHub Projects\\\\Ayurvedic Product Distribution System\\\\Online-Ayurvedic-Product-Distribution-System\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nconst AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token') || null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(!!localStorage.getItem('token'));\n\n  // Configure axios to use token\n  useEffect(() => {\n    if (token) {\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    } else {\n      delete axios.defaults.headers.common['Authorization'];\n    }\n  }, [token]);\n\n  // Load user on initial load\n  useEffect(() => {\n    const loadUser = async () => {\n      if (!token) {\n        setIsAuthenticated(false);\n        setLoading(false);\n        return;\n      }\n      try {\n        const res = await axios.get('http://localhost:5000/api/auth/me');\n        setCurrentUser(res.data.data);\n        setIsAuthenticated(true);\n      } catch (err) {\n        console.error('Error loading user:', err);\n        // If token is invalid or expired, clear it\n        localStorage.removeItem('token');\n        setToken(null);\n        setIsAuthenticated(false);\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadUser();\n  }, [token]);\n\n  // Register user\n  const register = async userData => {\n    try {\n      setLoading(true);\n      setError(null);\n      const res = await axios.post('http://localhost:5000/api/auth/register', userData);\n      const {\n        token,\n        user\n      } = res.data;\n\n      // Save token to localStorage\n      localStorage.setItem('token', token);\n      setToken(token);\n      setCurrentUser(user);\n      setIsAuthenticated(true);\n      return user;\n    } catch (err) {\n      var _err$response, _err$response$data;\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'Registration failed');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Login user\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const res = await axios.post('http://localhost:5000/api/auth/login', {\n        email,\n        password\n      });\n      const {\n        token,\n        user\n      } = res.data;\n\n      // Save token to localStorage\n      localStorage.setItem('token', token);\n      setToken(token);\n      setCurrentUser(user);\n      setIsAuthenticated(true);\n      return user;\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      setError(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || 'Login failed');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Logout user\n  const logout = () => {\n    localStorage.removeItem('token');\n    setToken(null);\n    setCurrentUser(null);\n    setIsAuthenticated(false);\n  };\n\n  // Check if user has a specific role\n  const hasRole = roles => {\n    if (!currentUser) return false;\n    if (Array.isArray(roles)) {\n      return roles.includes(currentUser.role);\n    }\n    return currentUser.role === roles;\n  };\n\n  // Check if current user is admin\n  const isAdmin = () => hasRole('admin');\n\n  // Check if current user is seller\n  const isSeller = () => hasRole('seller');\n\n  // Check if current user is customer\n  const isCustomer = () => hasRole('customer');\n\n  // Computed property to determine authentication status\n  const authenticated = !!token && !!currentUser;\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      currentUser,\n      token,\n      loading,\n      error,\n      isAuthenticated: authenticated,\n      register,\n      login,\n      logout,\n      hasRole,\n      isAdmin,\n      isSeller,\n      isCustomer,\n      setError\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"gc8GTt+OSHfEbCn8RKfMxJONzRI=\");\n_c = AuthProvider;\nexport default AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","currentUser","setCurrentUser","token","setToken","localStorage","getItem","loading","setLoading","error","setError","isAuthenticated","setIsAuthenticated","defaults","headers","common","loadUser","res","get","data","err","console","removeItem","register","userData","post","user","setItem","_err$response","_err$response$data","response","message","login","email","password","_err$response2","_err$response2$data","logout","hasRole","roles","Array","isArray","includes","role","isAdmin","isSeller","isCustomer","authenticated","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["d:/GitHub Projects/Ayurvedic Product Distribution System/Online-Ayurvedic-Product-Distribution-System/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\n\nexport const AuthContext = createContext();\n\nconst AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token') || null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(!!localStorage.getItem('token'));\n\n  // Configure axios to use token\n  useEffect(() => {\n    if (token) {\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    } else {\n      delete axios.defaults.headers.common['Authorization'];\n    }\n  }, [token]);\n\n  // Load user on initial load\n  useEffect(() => {\n    const loadUser = async () => {\n      if (!token) {\n        setIsAuthenticated(false);\n        setLoading(false);\n        return;\n      }\n\n      try {\n        const res = await axios.get('http://localhost:5000/api/auth/me');\n        setCurrentUser(res.data.data);\n        setIsAuthenticated(true);\n      } catch (err) {\n        console.error('Error loading user:', err);\n        // If token is invalid or expired, clear it\n        localStorage.removeItem('token');\n        setToken(null);\n        setIsAuthenticated(false);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadUser();\n  }, [token]);\n\n  // Register user\n  const register = async (userData) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const res = await axios.post('http://localhost:5000/api/auth/register', userData);\n      \n      const { token, user } = res.data;\n      \n      // Save token to localStorage\n      localStorage.setItem('token', token);\n      setToken(token);\n      setCurrentUser(user);\n      setIsAuthenticated(true);\n      \n      return user;\n    } catch (err) {\n      setError(err.response?.data?.message || 'Registration failed');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Login user\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const res = await axios.post('http://localhost:5000/api/auth/login', { email, password });\n      \n      const { token, user } = res.data;\n      \n      // Save token to localStorage\n      localStorage.setItem('token', token);\n      setToken(token);\n      setCurrentUser(user);\n      setIsAuthenticated(true);\n      \n      return user;\n    } catch (err) {\n      setError(err.response?.data?.message || 'Login failed');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Logout user\n  const logout = () => {\n    localStorage.removeItem('token');\n    setToken(null);\n    setCurrentUser(null);\n    setIsAuthenticated(false);\n  };\n\n  // Check if user has a specific role\n  const hasRole = (roles) => {\n    if (!currentUser) return false;\n    \n    if (Array.isArray(roles)) {\n      return roles.includes(currentUser.role);\n    }\n    \n    return currentUser.role === roles;\n  };\n\n  // Check if current user is admin\n  const isAdmin = () => hasRole('admin');\n  \n  // Check if current user is seller\n  const isSeller = () => hasRole('seller');\n  \n  // Check if current user is customer\n  const isCustomer = () => hasRole('customer');\n\n  // Computed property to determine authentication status\n  const authenticated = !!token && !!currentUser;\n\n  return (\n    <AuthContext.Provider\n      value={{\n        currentUser,\n        token,\n        loading,\n        error,\n        isAuthenticated: authenticated,\n        register,\n        login,\n        logout,\n        hasRole,\n        isAdmin,\n        isSeller,\n        isCustomer,\n        setError\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthProvider;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}