{"ast":null,"code":"var _jsxFileName = \"d:\\\\GitHub Projects\\\\Ayurvedic Product Distribution System\\\\Online-Ayurvedic-Product-Distribution-System\\\\frontend\\\\src\\\\components\\\\routing\\\\PrivateRoute.js\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport { Navigate, Outlet, useLocation } from 'react-router-dom';\nimport { AuthContext } from '../../context/AuthContext';\n\n// Component to protect routes based on authentication and role\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PrivateRoute = ({\n  allowedRoles\n}) => {\n  _s();\n  const context = useContext(AuthContext);\n  const {\n    currentUser,\n    token,\n    loading\n  } = context || {\n    currentUser: null,\n    token: null,\n    loading: false\n  };\n  const location = useLocation();\n\n  // If still loading auth state, don't render anything yet\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center items-center h-screen\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-green-500\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Check if user is authenticated\n  if (!token || !currentUser) {\n    // Redirect to login page, but save the location they were trying to access\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      state: {\n        from: location\n      },\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 12\n    }, this);\n  }\n\n  // If roles are specified, check if user has required role\n  if (allowedRoles && !allowedRoles.includes(currentUser === null || currentUser === void 0 ? void 0 : currentUser.role)) {\n    // Redirect to unauthorized page\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/unauthorized\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 12\n    }, this);\n  }\n\n  // User is authenticated and has the required role, render the protected component\n  return /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 10\n  }, this);\n};\n_s(PrivateRoute, \"svbCHNvAePzr7QG/zKGO2tvHrHg=\", false, function () {\n  return [useLocation];\n});\n_c = PrivateRoute;\nexport default PrivateRoute;\nvar _c;\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["React","useContext","Navigate","Outlet","useLocation","AuthContext","jsxDEV","_jsxDEV","PrivateRoute","allowedRoles","_s","context","currentUser","token","loading","location","className","children","fileName","_jsxFileName","lineNumber","columnNumber","to","state","from","replace","includes","role","_c","$RefreshReg$"],"sources":["d:/GitHub Projects/Ayurvedic Product Distribution System/Online-Ayurvedic-Product-Distribution-System/frontend/src/components/routing/PrivateRoute.js"],"sourcesContent":["import React, { useContext } from 'react';\nimport { Navigate, Outlet, useLocation } from 'react-router-dom';\nimport { AuthContext } from '../../context/AuthContext';\n\n// Component to protect routes based on authentication and role\nconst PrivateRoute = ({ allowedRoles }) => {\n  const context = useContext(AuthContext);\n  const { currentUser, token, loading } = context || { currentUser: null, token: null, loading: false };\n  const location = useLocation();\n\n  // If still loading auth state, don't render anything yet\n  if (loading) {\n    return (\n      <div className=\"flex justify-center items-center h-screen\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-green-500\"></div>\n      </div>\n    );\n  }\n\n  // Check if user is authenticated\n  if (!token || !currentUser) {\n    // Redirect to login page, but save the location they were trying to access\n    return <Navigate to=\"/login\" state={{ from: location }} replace />;\n  }\n\n  // If roles are specified, check if user has required role\n  if (allowedRoles && !allowedRoles.includes(currentUser?.role)) {\n    // Redirect to unauthorized page\n    return <Navigate to=\"/unauthorized\" replace />;\n  }\n\n  // User is authenticated and has the required role, render the protected component\n  return <Outlet />;\n};\n\nexport default PrivateRoute;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,SAASC,QAAQ,EAAEC,MAAM,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,SAASC,WAAW,QAAQ,2BAA2B;;AAEvD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EACzC,MAAMC,OAAO,GAAGV,UAAU,CAACI,WAAW,CAAC;EACvC,MAAM;IAAEO,WAAW;IAAEC,KAAK;IAAEC;EAAQ,CAAC,GAAGH,OAAO,IAAI;IAAEC,WAAW,EAAE,IAAI;IAAEC,KAAK,EAAE,IAAI;IAAEC,OAAO,EAAE;EAAM,CAAC;EACrG,MAAMC,QAAQ,GAAGX,WAAW,CAAC,CAAC;;EAE9B;EACA,IAAIU,OAAO,EAAE;IACX,oBACEP,OAAA;MAAKS,SAAS,EAAC,2CAA2C;MAAAC,QAAA,eACxDV,OAAA;QAAKS,SAAS,EAAC;MAA4E;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/F,CAAC;EAEV;;EAEA;EACA,IAAI,CAACR,KAAK,IAAI,CAACD,WAAW,EAAE;IAC1B;IACA,oBAAOL,OAAA,CAACL,QAAQ;MAACoB,EAAE,EAAC,QAAQ;MAACC,KAAK,EAAE;QAAEC,IAAI,EAAET;MAAS,CAAE;MAACU,OAAO;IAAA;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACpE;;EAEA;EACA,IAAIZ,YAAY,IAAI,CAACA,YAAY,CAACiB,QAAQ,CAACd,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEe,IAAI,CAAC,EAAE;IAC7D;IACA,oBAAOpB,OAAA,CAACL,QAAQ;MAACoB,EAAE,EAAC,eAAe;MAACG,OAAO;IAAA;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAChD;;EAEA;EACA,oBAAOd,OAAA,CAACJ,MAAM;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACnB,CAAC;AAACX,EAAA,CA5BIF,YAAY;EAAA,QAGCJ,WAAW;AAAA;AAAAwB,EAAA,GAHxBpB,YAAY;AA8BlB,eAAeA,YAAY;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}